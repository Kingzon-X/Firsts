1 Response.apparent_encoding:
Атрибут Response.apparent_encoding возвращает кодировку, определенную сторонним модулем chardet.

2 Response.close():
Метод Response.close() освобождает соединение с пулом. Как только этот метод был вызван, базовый необработанный объект больше не будет доступен.

3 Response.content:
Атрибут Response.content возвращает содержание ответа сервера, представленное в байтах.


4 Response.cookies = None:
Атрибут Response.cookies возвращает хранилище CookieJar файлов cookie, которые сервер отправил обратно.

Другими словами возвращает cookies, установленные сервером.

5 Response.elapsed = None:
Атрибут Response.elapsed возвращает время, прошедшее между отправкой запроса и получением ответа (в виде timedelta).

Это свойство специально измеряет время, затраченное между отправкой первого байта запроса и завершением анализа заголовков. Поэтому на него не влияет потребление содержимого ответа или значения ключевого аргумента stream.

6 Response.encoding = None:
Атрибут Response.encoding возвращает/устанавливает кодировку для декодирования контента при доступе к атрибуту Response.text.

7 Response.headers = None:
Атрибут Response.headers возвращает словарь без учета регистра, с заголовками сервера, которые он вернул во время ответа.

Например, заголовки ['content-encoding'] вернут значение заголовка ответа Content-Encoding.

8 Response.history = None:
Атрибут Response.history возвращает список объектов ответа сервера из истории запроса. Здесь окажутся все перенаправленные ответы.

Список сортируется от самого старого до самого последнего запроса.

9 Response.is_permanent_redirect:
Атрибут Response.is_permanent_redirect возвращает True, если в этом ответе одна из постоянных версий перенаправления.


10 Response.is_redirect:
Атрибут Response.is_redirect возвращает True если этот ответ является хорошо сформированным HTTP-перенаправлением, которое могло бы быть обработано автоматически (Session.resolve_redirects).

11 Response.iter_content(chunk_size=1, decode_unicode=False):
Метод Response.iter_content() перебирает данные ответа. Когда в запросе установлен stream=True, то это позволяет избежать одновременного чтения содержимого в память для больших ответов.

12 Размер блока chunk_size - это количество байтов, которые он должен считывать в память. Это не обязательно длина каждого возвращаемого элемента, т.к. может иметь место декодирование.

Аргумент chunk_size должен иметь тип int или None. Значение None будет функционировать по-разному в зависимости от значения stream. Если stream=True, то будет считывать данные по мере их поступления в любом размере полученных фрагментов. Если stream=False, то данные возвращаются как один фрагмент.

Если аргумент decode_unicode=True, то содержимое будет декодировано с использованием наилучшей доступной кодировки на основе ответа.

13 Response.iter_lines(chunk_size=512, decode_unicode=False, delimiter=None):
Метод Response.iter_lines() перебирает данные ответа, по одной строке за раз. Когда в запросе установлен stream=True, то это позволяет избежать одновременного чтения содержимого в память для больших ответов.

Обратите внимание, что этот метод не является безопасным для повторного входа.

14 Response.json(**kwargs):
Метод Response.json() возвращает закодированное в json содержимое ответа, если таковое имеется.

Аргумент **kwargs это необязательные аргументы, которые принимает json.loads.

Возникающие исключения:

simplejson.JSONDecodeError - если тело ответа не содержит действительного json и установлен simplejson.
json.JSONDecodeError - если тело ответа не содержит допустимого json и simplejson не установлен.

15 Response.links:
Атрибут Response.links возвращает проанализированные ссылки заголовка ответа, если таковые имеются.

16 Response.next:
Атрибут Response.next возвращает объект подготовленного запроса PreparedRequest для следующего запроса в цепочке перенаправления, если таковой имеется.

17 Response.ok:
Атрибут Response.ok возвращает True, если status_code меньше 400, и False, если нет.

Этот атрибут проверяет, находится ли код состояния ответа в диапазоне от 400 до 600, чтобы проверить, была ли ошибка клиента или ошибка сервера. Если код состояния находится в диапазоне от 200 до 400, то этот атрибут вернет значение True.

Это не проверка кода ответа 200 OK.

18 Response.raise_for_status():
Метод Response.raise_for_status() вызывает исключение HTTPError, если таковой произошел.


19 Response.raw = None:
Атрибут Response.raw возвращает представление ответа в виде файлового объекта (для расширенного использования).

Использование Response.raw требует, чтобы в запросе был установлен stream=True. Это требование не распространяется на внутреннее использование запросов.

20 Response.reason = None:
Атрибут Response.reason возвращает текстовое представление ответа HTTP-статуса, например 'Not Found' или 'OK'.


21 Response.request = None:
Атрибут Response.request возвращает объект подготовленного запроса PreparedRequest, на который является ответом.


22 Response.status_code = None:
Атрибут Response.status_code целочисленный код ответа HTTP-статуса, например 404 или 200.


23 Response.text:
Атрибут Response.text возвращает cодержание/контент ответа сервера в юникоде.

Если Response.encoding=None, то кодировка будет угадана с помощью модуля chardet.

Кодировка содержимого ответа определяется исключительно на основе HTTP-заголовков, следующих за RFC 2616. Если вы точно знаете кодировку сайта, а Response.text возвращает "крокозябры", то тогда сначала следует установить Response.encoding в нужную кодировку, перед тем как вызвать Response.text.


24 Response.url = None:
Атрибут Response.url окончательный URL-адреса ответа, после перенаправлений, которые делал сервер.